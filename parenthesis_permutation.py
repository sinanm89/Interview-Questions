from typing import List


class Solution:

    def generateParenthesis(self, n: int) -> List[str]:

        out = []
        stack = []

        open_p = 0
        closed_p = 0

        def branch(open_p: int, closed_p: int) -> List[str]:
            print(open_p, closed_p)
            if open_p == closed_p == n:
                out.append("".join(stack))
                return

            if open_p < n:
                stack.append('(')
                branch(open_p=open_p+1, closed_p=closed_p)
                stack.pop()

            if closed_p < open_p:
                stack.append(')')
                branch(open_p=open_p, closed_p=closed_p+1)
                stack.pop()

        branch(0,0)
        return out
# [] []
# [] ['(']
# [] ['(', '(']
# [] ['(', '(', '(']
# [] ['(', '(', '(', ')']
# [] ['(', '(', '(', ')', ')']
# [] ['(', '(', '(', ')', ')', ')']
# ['((()))'] ['(', '(', ')']
# ['((()))'] ['(', '(', ')', '(']
# ['((()))'] ['(', '(', ')', '(', ')']
# ['((()))'] ['(', '(', ')', '(', ')', ')']
# ['((()))', '(()())'] ['(', '(', ')', ')']
# ['((()))', '(()())'] ['(', '(', ')', ')', '(']
# ['((()))', '(()())'] ['(', '(', ')', ')', '(', ')']
# ['((()))', '(()())', '(())()'] ['(', ')']
# ['((()))', '(()())', '(())()'] ['(', ')', '(']
# ['((()))', '(()())', '(())()'] ['(', ')', '(', '(']
# ['((()))', '(()())', '(())()'] ['(', ')', '(', '(', ')']
# ['((()))', '(()())', '(())()'] ['(', ')', '(', '(', ')', ')']
# ['((()))', '(()())', '(())()', '()(())'] ['(', ')', '(', ')']
# ['((()))', '(()())', '(())()', '()(())'] ['(', ')', '(', ')', '(']
# ['((()))', '(()())', '(())()', '()(())'] ['(', ')', '(', ')', '(', ')']
# ['((()))', '(()())', '(())()', '()(())', '()()()']

print(Solution().generateParenthesis(n=3))
